apiVersion: v1
data:
  ENV_VAR_1: fake
  ENV_VAR_2: faker
kind: ConfigMap
metadata:
  name: example-config
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJ0dGwuc2giOnsiYXV0aCI6IllXSmpPakV5TXc9PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: null
  name: kotsadm-replicated-registry
  namespace: dmitriykots
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  postgresql-password: WlNHdmRqTWw5WQ==
kind: Secret
metadata:
  labels:
    app: postgresql
    chart: postgresql-8.1.2
    heritage: Tiller
    release: postgresql
  name: postgresql
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: example
    component: mysql
  name: example-mysql
spec:
  ports:
  - name: mysql
    nodePort: 31306
    port: 3306
    protocol: TCP
    targetPort: mysql
  selector:
    app: example
    component: mysql
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: example
    component: nginx
  name: example-nginx
spec:
  ports:
  - port: 80
  selector:
    app: example
    component: nginx
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
    chart: postgresql-8.1.2
    heritage: Tiller
    release: postgresql
  name: postgresql-headless
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
    chart: postgresql-8.1.2
    heritage: Tiller
    release: postgresql
  name: postgresql
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: postgresql
    role: master
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: example
    component: mysql
  name: example-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example
      component: mysql
  template:
    metadata:
      labels:
        app: example
        component: mysql
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: abc123
        image: ttl.sh/qakots/qa-mysql:5.6
        name: qa-mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
      imagePullSecrets:
      - name: kotsadm-replicated-registry
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: example
    component: nginx
  name: example-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example
      component: nginx
  template:
    metadata:
      labels:
        app: example
        component: nginx
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: example-config
        image: ttl.sh/qakots/nginx:latest
        name: nginx
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
      - env:
        - name: HOSTNAME
          value: www.google.com
        image: ttl.sh/qakots/qa-kots:alpine-3.5
        name: ping
      - image: ttl.sh/qakots/redis:5.0.7
        name: redis
      imagePullSecrets:
      - name: kotsadm-replicated-registry
      initContainers:
      - command:
        - sh
        - -c
        - until nslookup example-mysql; do echo waiting for example-mysql; sleep 2;
          done;
        image: ttl.sh/qakots/dnsutils:14.04
        name: qa-ubuntu
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgresql
    chart: postgresql-8.1.2
    heritage: Tiller
    release: postgresql
  name: postgresql-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      release: postgresql
      role: master
  serviceName: postgresql-headless
  template:
    metadata:
      labels:
        app: postgresql
        chart: postgresql-8.1.2
        heritage: Tiller
        release: postgresql
        role: master
      name: postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        image: ttl.sh/qakots/postgresql:11.6.0-debian-9-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      imagePullSecrets:
      - name: kotsadm-replicated-registry
      initContainers:
      - command:
        - /bin/sh
        - -c
        - |
          mkdir -p /bitnami/postgresql/data
          chmod 700 /bitnami/postgresql/data
          find /bitnami/postgresql -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
            xargs chown -R 1001:1001
          chmod -R 777 /dev/shm
        image: ttl.sh/qakots/minideb:stretch
        imagePullPolicy: Always
        name: init-chmod-data
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
        - mountPath: /dev/shm
          name: dshm
      securityContext:
        fsGroup: 1001
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: example
    component: job
  name: job-37rzx5
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: example
        component: job
    spec:
      containers:
      - command:
        - sh
        - -c
        - cat /etc/os-release
        image: ttl.sh/qakots/qa-kots:ubuntu-18.04
        name: qa-ubuntu
      imagePullSecrets:
      - name: kotsadm-replicated-registry
      restartPolicy: Never
